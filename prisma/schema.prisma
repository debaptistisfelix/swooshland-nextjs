// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?   
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  newsLetterSub  Boolean   @default(false)
  role           Role      @default(USER)
  passwordChangedAt DateTime?
  passwordResetToken String?
  passwordResetExpires DateTime?
  addresses Address[]
  reviews Review[]
  accounts Account[]
  wishlistItems WishListItem[]
  cartItems CartItem[]
  orders Order[]
}

enum Role {
  USER
  ADMIN
}

model Address{
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  user        User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.ObjectId
  name        String
  surname     String
  street     String
  city        String
  state       String
  country     String
  zip         String
  phone       String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orders      Order[]

  
}



model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Item{
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  model       String
  category    String
  ratingsAverage Float @default(0)
  ratingsQuantity Int @default(0)
  images     Json[]
  paletteColors PaletteColors[]
  tag        String
  description String
  price       Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  availableSizes AvailableSize[]
  reviews Review[]
  wishlistItems WishListItem[]
  cartItems CartItem[]
 
}

model PaletteColors{
   id       String   @id @default(auto()) @map("_id") @db.ObjectId
  hex      String
  name     String
  item     Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId   String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AvailableSize {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  EUsize      String
  availability Float
  reserved    Float @default(0)
  item        Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review{
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int
  comment     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.ObjectId
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String  @db.ObjectId
}


model WishListItem{
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chosenSize  Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.ObjectId
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String  @db.ObjectId
}

model CartItem{
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  chosenSize  Float

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.ObjectId
  item Item @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId      String  @db.ObjectId
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId      String?  @db.ObjectId
}

model Order{
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  subTotal    Float
  shipping    Float
  total       Float
  status      Status @default(PENDING)
  cartItems CartItem[]
  address    Address  @relation(fields: [addressId], references: [id], onDelete: Cascade)
  addressId      String  @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String  @db.ObjectId
  
}

enum Status{
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}







